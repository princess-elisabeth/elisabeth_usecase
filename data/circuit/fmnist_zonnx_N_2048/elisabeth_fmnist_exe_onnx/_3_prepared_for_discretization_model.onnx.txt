graph torch-jit-export (
  %0[FLOAT, 10x1x28x28]
) optional inputs with matching initializers (
  %local_expansion_factor_0[FLOAT, 1]
  %conv.weight_modified_1[FLOAT, 4x1x7x7]
  %conv.bias_modified_1[FLOAT, 4]
  %local_expansion_factor_1[FLOAT, 1]
  %fc1.weight_modified_2[FLOAT, 64x256]
  %fc1.bias_modified_2[FLOAT, 64]
  %local_expansion_factor_2[FLOAT, 1]
  %fc2.weight_modified_3[FLOAT, 32x64]
  %fc2.bias_modified_3[FLOAT, 32]
  %local_expansion_factor_3[FLOAT, 1]
  %fc3.weight_modified_4[FLOAT, 10x32]
  %fc3.bias_modified_4[FLOAT, 10]
) initializers (
  %conv.weight[FLOAT, 4x1x7x7]
  %conv.bias[FLOAT, 4]
  %fc1.weight[FLOAT, 64x256]
  %fc1.bias[FLOAT, 64]
  %fc2.weight[FLOAT, 32x64]
  %fc2.bias[FLOAT, 32]
  %fc3.weight[FLOAT, 10x32]
  %fc3.bias[FLOAT, 10]
) {
  %noise_0_zonnx_internal_node_0 = RandomNormalLike[scale = 0](%0)
  %0_with_noise_0 = Add(%0, %noise_0_zonnx_internal_node_0)
  %0_zonnx_internal_node_without_expansion_factor_in_0 = Div(%0_with_noise_0, %local_expansion_factor_0)
  %1 = Sigmoid(%0_zonnx_internal_node_without_expansion_factor_in_0)
  %2 = Conv[dilations = [1, 1], group = 1, kernel_shape = [7, 7], pads = [0, 0, 0, 0], strides = [3, 3]](%1, %conv.weight_modified_1, %conv.bias_modified_1)
  %noise_2_zonnx_internal_node_1 = RandomNormalLike[scale = 0](%2)
  %2_with_noise_1 = Add(%2, %noise_2_zonnx_internal_node_1)
  %2_zonnx_internal_node_without_expansion_factor_in_1 = Div(%2_with_noise_1, %local_expansion_factor_1)
  %3 = Sigmoid(%2_zonnx_internal_node_without_expansion_factor_in_1)
  %4 = Flatten[axis = 1](%3)
  %5 = Gemm[alpha = 1, beta = 1, transB = 1](%4, %fc1.weight_modified_2, %fc1.bias_modified_2)
  %noise_5_zonnx_internal_node_2 = RandomNormalLike[scale = 0](%5)
  %5_with_noise_2 = Add(%5, %noise_5_zonnx_internal_node_2)
  %5_zonnx_internal_node_without_expansion_factor_in_2 = Div(%5_with_noise_2, %local_expansion_factor_2)
  %6 = Sigmoid(%5_zonnx_internal_node_without_expansion_factor_in_2)
  %7 = Gemm[alpha = 1, beta = 1, transB = 1](%6, %fc2.weight_modified_3, %fc2.bias_modified_3)
  %noise_7_zonnx_internal_node_3 = RandomNormalLike[scale = 0](%7)
  %7_with_noise_3 = Add(%7, %noise_7_zonnx_internal_node_3)
  %7_zonnx_internal_node_without_expansion_factor_in_3 = Div(%7_with_noise_3, %local_expansion_factor_3)
  %8 = Sigmoid(%7_zonnx_internal_node_without_expansion_factor_in_3)
  %9_without_noise = Gemm[alpha = 1, beta = 1, transB = 1](%8, %fc3.weight_modified_4, %fc3.bias_modified_4)
  %noise_final__zonnx_internal_node_4 = RandomNormalLike[scale = 0](%9_without_noise)
  %9 = Add(%9_without_noise, %noise_final__zonnx_internal_node_4)
  return %9
}